{"\ufeffCREATING UI AND IMPLEMENTING VARIOUS COMPONENTS USING REACT\n\n\n\n\n\n\n\n\n\n\nTEAM MEMBERS: \n      ASIF FAROOK.K (211520205016)  (GITHUB ID: https://github.com/ASIF10504)\n      \n      ARSHAT AHAMED RAFIQ A.S (211520205015)(GITHUB ID: https://github.com/AGTAHAMED)\nCREATING UI AND IMPLEMENTING VARIOUS COMPONENTS USING REACT\n\n$ npx create-react-app count-ui\nnpx: installed 67 in 7.295s\n\nCreating a new React app in /Users/cherrybomb/count-ui.\n\nInstalling packages. This might take a couple of minutes.\nInstalling react, react-dom, and react-scripts with cra-template...\n[...]\nInstalling template dependencies using npm...\n+ @testing-library/jest-dom@5.16.4\n+ @testing-library/user-event@13.5.0\n+ web-vitals@2.1.4\n+ @testing-library/react@13.3.0\nadded 52 packages from 109 contributors in 9.858s\n[...]\nSuccess! Created count-ui at /Users/cherrybomb/count-ui\n[...]\nWe suggest that you begin by typing:\n\n  cd count-ui\n  npm start\nAs you can see, the\u00a0npx\u00a0command has created a new template with a folder structure, an awesome\u00a0README\u00a0file, and a Git repository. Here's the structure:\n$ cd count-ui/\n/Users/cherrybomb/count-ui\n\n$ ls -A -1\n.git\n.gitignore\nREADME.md\nnode_modules\npackage-lock.json\npackage.json\npublic\nsrc\nThis process also initialized the Git repo and set the branch to master, which is a pretty cool trick. Next, install the\u00a0npm\u00a0packages:\n$ npm install axios http-proxy-middleware\n[...]\nnpm WARN @apideck/better-ajv-errors@0.3.4 requires a peer of ajv@>": "8 but none is installed. You must install peer dependencies yourself.\n+ http-proxy-middleware@2.0.6\n+ axios@0.27.2\nadded 2 packages from 2 contributors, updated 1 package and audited 1449 packages in 5.886s\nNow that those are set up, add your\u00a0services, and\u00a0main.js\u00a0file:\n$ mkdir src/services\nsrc/services\n\n$ touch src/services/main.js\nPreconfiguration is now complete, so you can now work on coding.\nCode a UI from start to finish\nNow that you have everything preconfigured, you can put together the service for your application. Add the following code to the\u00a0main.js\u00a0file:\nimport axios from 'axios'", "\nconst baseURL ": "'http://localhost:5001/api'", "\nexport const get ": null, "\nexport const increment ": null, "\nexport default {\n    get,\n    increment\n}\nThis process creates a JavaScript file that interacts with the API you created in my previous article.\nSet up the proxy\nNext, you must set up a proxy middleware by creating a new file in the\u00a0src\u00a0directory.\n$ touch src/setupProxy.js\nConfigure the proxy with this code in\u00a0setupProxy.js:\nconst { createProxyMiddleware } ": "require('http-proxy-middleware')", "\nmodule.exports ": "function(app) {\n  app.use(\n    '/api',\n    createProxyMiddleware({\n      target: 'http://localhost:5000',\n      changeOrigin: true,\n    })\n  )", "\n}": null, "\nIn this code, the\u00a0app.use\u00a0function specifies the service to use as\u00a0/api\u00a0when connecting to the existing API project. However, nothing defines\u00a0api\u00a0in the code. This is where a proxy comes in. With a proxy, you can define the\u00a0api\u00a0function on the proxy level to interact with your Express API. This middleware registers requests between both applications because the UI and API use the same host with different ports. They require a proxy to transfer internal traffic.\nSKIP TO CONTENT\nProgramming and development\nRed Hat Developers Blog\nProgramming cheat sheets\nTry for free: Red Hat Learning Subscription\neBook HYPERLINK \"https://opensource.com/downloads/bash-programming-guide?intcmp": null, "\nAdd the rendering function\nNow that you have your imports, you must add a render function. In the\u00a0App()\u00a0function of\u00a0App.js, add the first section of definitions for\u00a0react\u00a0and\u00a0count\u00a0before the\u00a0return\u00a0section. This section gets the\u00a0count\u00a0from the API and puts it on the screen. In the\u00a0return\u00a0function, a button provides the ability to increment the count.\nfunction App() {\nconst [count, setCount] ": "React.useState(0)", "\nReact.useEffect(()": null, "\n    setCount(newCount)": null, "\n  }\n  fetchCount()": null, "\n}, [setCount])": null, "\nreturn (  \n    <div className": null, "\n        }}>\n          Increment\n        </button>\n      </header>\n    </div>\n  )": null, "\n}\nTo start and test the app, run\u00a0npm run start. You should see the output below. Before running the application, confirm your API is running from the Express app by running node\u00a0./src/index.js.\n$ npm run start\n> count-ui@0.1.0 start /Users/cherrybomb/count-ui\n> react-scripts start\n\n[HPM] Proxy created: /  -> http://localhost:5000\n(node:71729) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: 'onAfterSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.\n(Use `node --trace-deprecation ...` to show where the warning was created)\n(node:71729) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: 'onBeforeSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.\nStarting the development server...": null}